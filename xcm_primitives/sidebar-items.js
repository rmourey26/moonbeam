initSidebarItems({"enum":[["UtilityAvailableCalls",""]],"struct":[["AccountIdToMultiLocation","Instructs how to convert a 20 byte accountId into a MultiLocation"],["AsAssetType","Converter struct implementing `AssetIdConversion` converting a numeric asset ID (must be `TryFrom/TryInto<u128>`) into a MultiLocation Value and Viceversa through an intermediate generic type AssetType. The trait bounds enforce is that the AssetTypeGetter trait is also implemented for AssetIdInfoGetter"],["FirstAssetTrader",""],["MultiIsConcrete",""],["MultiNativeAsset","A `FilterAssetLocation` implementation. Filters multi native assets whose reserve is same with `origin`."],["SignedToAccountId20",""],["XcmFeesToAccount","XCM fee depositor to which we implement the TakeRevenue trait It receives a fungibles::Mutate implemented argument, a matcher to convert MultiAsset into AssetId and amount, and the fee receiver account"]],"trait":[["AccountIdToCurrencyId","This trait ensure we can convert AccountIds to CurrencyIds We will require Runtime to have this trait implemented"],["AssetTypeGetter",""],["Reserve",""],["UnitsToWeightRatio",""],["UtilityEncodeCall",""],["XcmTransact",""]]});